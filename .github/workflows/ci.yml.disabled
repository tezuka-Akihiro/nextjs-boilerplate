name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20'
  CACHE_KEY_PREFIX: 'v1'

jobs:
  # ===== ÂìÅË≥™„ÉÅ„Çß„ÉÉ„ÇØ„Ç∏„Éß„Éñ =====
  quality-check:
    name: Quality Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    strategy:
      matrix:
        check: [lint, type-check, format-check]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ env.CACHE_KEY_PREFIX }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ env.CACHE_KEY_PREFIX }}-npm-
            
      - name: Install dependencies
        run: npm ci
        
      - name: Run Lint
        if: matrix.check == 'lint'
        run: npm run lint
        
      - name: Run Type Check
        if: matrix.check == 'type-check'
        run: npm run type-check
        
      - name: Run Format Check
        if: matrix.check == 'format-check'
        run: npm run format:check

  # ===== „ÉÜ„Çπ„Éà„Ç∏„Éß„Éñ =====
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    env:
      NODE_ENV: test
      NEXT_PUBLIC_APP_ENV: test
      NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.TEST_SUPABASE_URL }}
      NEXT_PUBLIC_SUPABASE_PUBLISHABLE_KEY: ${{ secrets.TEST_SUPABASE_PUBLISHABLE_KEY }}
      SUPABASE_SECRET_KEY: ${{ secrets.TEST_SUPABASE_SECRET_KEY }}
      TEST_USER_ID: '00000000-0000-0000-0000-000000000001'
      TEST_USER_EMAIL: 'test@example.com'
      TEST_USER_NAME: 'Test User'
      SKIP_ENV_VALIDATION: 'true'
      # Â§ñÈÉ®„Çµ„Éº„Éì„Çπ „ÉÜ„Çπ„ÉàÁî®Áí∞Â¢ÉÂ§âÊï∞
      RESEND_API_KEY: 'test_resend_api_key'
      FROM_EMAIL: 'test@example.com'
      SENTRY_DSN: 'https://test@sentry.io/test'
      SLACK_WEBHOOK_URL: 'https://hooks.slack.com/test/webhook'
      NEXT_PUBLIC_RECAPTCHA_SITE_KEY: 'test_recaptcha_site_key'
      RECAPTCHA_SECRET_KEY: 'test_recaptcha_secret_key'
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ env.CACHE_KEY_PREFIX }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ env.CACHE_KEY_PREFIX }}-npm-
            
      - name: Install dependencies
        run: npm ci
        
      - name: Run Backend Unit Tests
        run: npm run test:backend:unit
        
      - name: Run Backend Integration Tests
        run: npm run test:backend:integration
        
      - name: Run All Tests with Coverage
        run: npm run test:coverage
        
      - name: Upload Coverage Reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          retention-days: 7
          
      - name: Check Backend Coverage Thresholds
        run: |
          echo "Checking backend coverage thresholds..."
          npm run coverage:check
        continue-on-error: true
          
      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: backend
          name: projectname-backend-coverage
          fail_ci_if_error: false

  # ===== „Éì„É´„Éâ„ÉÜ„Çπ„Éà„Ç∏„Éß„Éñ =====
  build-test:
    name: Build Test
    runs-on: ubuntu-latest
    needs: [quality-check]
    timeout-minutes: 10
    
    env:
      NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
      NEXT_PUBLIC_SUPABASE_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_PUBLISHABLE_KEY }}
      SUPABASE_SECRET_KEY: ${{ secrets.SUPABASE_SECRET_KEY }}
      NEXT_PUBLIC_VERCEL_ANALYTICS: '0'
      NEXT_PUBLIC_VERCEL_SPEED_INSIGHTS: '0'
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        
      - name: Check build output
        run: |
          if [ ! -d ".next" ]; then
            echo "‚ùå Build output not found"
            exit 1
          fi
          echo "‚úÖ Build successful"

  # ===== „Çª„Ç≠„É•„É™„ÉÜ„Ç£„Çπ„Ç≠„É£„É≥„Ç∏„Éß„Éñ =====
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

  # ===== ÈÄöÁü•„Ç∏„Éß„Éñ =====
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [quality-check, test, build-test, security-scan]
    if: always()
    
    steps:
      - name: Notify Success
        if: ${{ needs.build-test.result == 'success' }}
        run: |
          echo "üéâ CI/CD Pipeline completed successfully!"
          echo "‚úÖ Quality Check: ${{ needs.quality-check.result }}"
          echo "‚úÖ Tests: ${{ needs.test.result }}"
          echo "‚úÖ Build: ${{ needs.build-test.result }}"
          echo "‚úÖ Security: ${{ needs.security-scan.result }}"
          
      - name: Notify Failure
        if: ${{ failure() }}
        run: |
          echo "‚ùå CI/CD Pipeline failed!"
          echo "Quality Check: ${{ needs.quality-check.result }}"
          echo "Tests: ${{ needs.test.result }}"
          echo "Build: ${{ needs.build-test.result }}"
          echo "Security: ${{ needs.security-scan.result }}"
          exit 1