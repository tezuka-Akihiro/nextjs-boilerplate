name: Code Quality Check

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  # Dependency Security Audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level high

      - name: Check for security vulnerabilities
        run: |
          echo "Security audit completed"
          # Add additional security checks here

  # Code Quality Analysis
  code-analysis:
    name: Code Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint with report
        run: |
          npm run lint -- --format json --output-file eslint-report.json || true
          echo "ESLint analysis completed"

      - name: Run Type Check
        run: npm run type-check

      - name: Upload ESLint report
        uses: actions/upload-artifact@v4
        with:
          name: eslint-report
          path: eslint-report.json

  # Performance & Bundle Analysis
  bundle-analysis:
    name: Bundle Analysis
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build with bundle analyzer
        run: npm run performance:analyze
        env:
          BUILD_ANALYZE: true
          SKIP_ENV_VALIDATION: true

      - name: Upload bundle analysis
        uses: actions/upload-artifact@v4
        with:
          name: bundle-analysis
          path: .next/analyze/

  # Documentation Check
  docs-check:
    name: Documentation Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check required documentation
        run: |
          echo "Checking documentation files..."
          
          # Check if required files exist
          required_files=(
            "README.md"
            "CLAUDE.md"
            "docs/requirements.md"
            "docs/architecture/database-erd.md"
            "docs/api/api-specification.md"
            ".env.example"
          )
          
          missing_files=()
          for file in "${required_files[@]}"; do
            if [[ ! -f "$file" ]]; then
              missing_files+=("$file")
            fi
          done
          
          if [[ ${#missing_files[@]} -gt 0 ]]; then
            echo "❌ Missing required documentation files:"
            printf '%s\n' "${missing_files[@]}"
            exit 1
          else
            echo "✅ All required documentation files present"
          fi

      - name: Check database schema files
        run: |
          echo "Checking database schema files..."
          schema_files=(
            "docs/database/01-base-schema.sql"
            "docs/database/05-final-schema.sql"
            "docs/database/06-monitoring-schema.sql"
          )
          
          for file in "${schema_files[@]}"; do
            if [[ ! -f "$file" ]]; then
              echo "❌ Missing schema file: $file"
              exit 1
            fi
          done
          echo "✅ All schema files present"

  # Environment Configuration Check
  env-check:
    name: Environment Configuration Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check environment configuration
        run: |
          echo "Checking environment configuration files..."
          
          # Check .env.example completeness
          if [[ ! -f ".env.example" ]]; then
            echo "❌ .env.example file missing"
            exit 1
          fi
          
          # Check required environment variables
          required_vars=(
            "NEXT_PUBLIC_SUPABASE_URL"
            "NEXT_PUBLIC_SUPABASE_PUBLISHABLE_KEY"
            "SUPABASE_SECRET_KEY"
            "NEXTAUTH_SECRET"
            "NEXTAUTH_URL"
            "RESEND_API_KEY"
            "FROM_EMAIL"
            "SENTRY_DSN"
            "SLACK_WEBHOOK_URL"
            "NEXT_PUBLIC_RECAPTCHA_SITE_KEY"
            "RECAPTCHA_SECRET_KEY"
          )
          
          missing_vars=()
          for var in "${required_vars[@]}"; do
            if ! grep -q "^$var=" .env.example; then
              missing_vars+=("$var")
            fi
          done
          
          if [[ ${#missing_vars[@]} -gt 0 ]]; then
            echo "❌ Missing required environment variables in .env.example:"
            printf '%s\n' "${missing_vars[@]}"
            exit 1
          else
            echo "✅ All required environment variables present in .env.example"
          fi

      - name: Check Vercel configuration
        run: |
          echo "Checking Vercel configuration..."
          
          if [[ ! -f "vercel.json" ]]; then
            echo "❌ vercel.json file missing"
            exit 1
          fi
          
          # Basic JSON syntax check
          if ! python3 -m json.tool vercel.json > /dev/null; then
            echo "❌ vercel.json has invalid JSON syntax"
            exit 1
          fi
          
          echo "✅ Vercel configuration is valid"

  # AI滑走路4層アーキテクチャ準拠チェック
  architecture-check:
    name: Architecture Compliance Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check AI滑走路4層アーキテクチャ compliance
        run: |
          echo "Checking AI滑走路4層アーキテクチャ compliance..."
          
          # Check directory structure
          required_dirs=(
            "src/backend/api"
            "src/backend/controllers"
            "src/backend/tasks"
            "src/backend/resources"
            "src/backend/responses"
            "src/shared/types"
          )
          
          missing_dirs=()
          for dir in "${required_dirs[@]}"; do
            if [[ ! -d "$dir" ]]; then
              missing_dirs+=("$dir")
            fi
          done
          
          if [[ ${#missing_dirs[@]} -gt 0 ]]; then
            echo "❌ Missing required architecture directories:"
            printf '%s\n' "${missing_dirs[@]}"
            exit 1
          else
            echo "✅ AI滑走路4層アーキテクチャ directory structure is correct"
          fi

      - name: Check template files
        run: |
          echo "Checking template files..."
          template_files=(
            "docs/templates/ApiTemplate.ts"
            "docs/templates/ControllerTemplate.ts"
            "docs/templates/TaskTemplate.ts"
            "docs/templates/ResourceTemplate.ts"
            "docs/templates/ResponseTemplate.ts"
          )
          
          for file in "${template_files[@]}"; do
            if [[ ! -f "$file" ]]; then
              echo "❌ Missing template file: $file"
              exit 1
            fi
          done
          echo "✅ All template files present"

      - name: Check backend test structure
        run: |
          echo "Checking backend test structure..."
          test_dirs=(
            "tests/backend/unit"
            "tests/backend/integration"
            "tests/setup"
            "tests/config"
          )
          
          for dir in "${test_dirs[@]}"; do
            if [[ ! -d "$dir" ]]; then
              echo "❌ Missing test directory: $dir"
              exit 1
            fi
          done
          
          # Check test configuration files
          if [[ ! -f "vitest.config.ts" ]]; then
            echo "❌ Missing vitest.config.ts"
            exit 1
          fi
          
          if [[ ! -f "tests/setup/vitest-setup.ts" ]]; then
            echo "❌ Missing vitest setup file"
            exit 1
          fi
          
          echo "✅ Backend test structure is correct"